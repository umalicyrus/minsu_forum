generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  password   String
  bio        String?
  image      String?
  location   String?      
  role       Role         @default(USER)

  questions  Question[]
  answers    Answer[]
  comments   Comment[]
  qComments  QComment[]
  votes      Vote[]
  qVotes     QuestionVote[]
  bookmarks  Bookmark[]
  reports    Report[]
  hidden     NotInterested[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Question {
  id         Int             @id @default(autoincrement())
  title      String
  content    String?
  authorId   Int
  author     User            @relation(fields: [authorId], references: [id])

  answers    Answer[]
  comments   QComment[]
  votes      QuestionVote[]
  bookmarks  Bookmark[]
  topics     QuestionTopic[]
  reports    Report[]
  hidden     NotInterested[]

  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Answer {
  id         Int       @id @default(autoincrement())
  content    String
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id])
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])

  comments   Comment[]
  votes      Vote[]
  reports    Report[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  answerId  Int
  answer    Answer   @relation(fields: [answerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QComment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        Int     @id @default(autoincrement())
  value     Int     // 1 = upvote, -1 = downvote
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  answerId  Int
  answer    Answer  @relation(fields: [answerId], references: [id])

  createdAt DateTime @default(now())
}

model QuestionVote {
  id         Int      @id @default(autoincrement())
  value      Int      // 1 = upvote, -1 = downvote
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  createdAt  DateTime @default(now())
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  createdAt  DateTime @default(now())

  @@unique([userId, questionId]) // prevent duplicate bookmarks
}

model Topic {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  questions QuestionTopic[]

  createdAt DateTime        @default(now())
}

model QuestionTopic {
  questionId Int
  topicId    Int

  question   Question @relation(fields: [questionId], references: [id])
  topic      Topic    @relation(fields: [topicId], references: [id])

  @@id([questionId, topicId])
}

model Report {
  id         Int      @id @default(autoincrement())
  reason     String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int?
  question   Question? @relation(fields: [questionId], references: [id])
  answerId   Int?
  answer     Answer?   @relation(fields: [answerId], references: [id])

  createdAt  DateTime @default(now())
}

model NotInterested {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  createdAt  DateTime @default(now())

  @@unique([userId, questionId]) // prevent duplicate "not interested"
}
